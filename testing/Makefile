# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../gtest

# Where to find user code.
USER_DIR = .

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I..

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = test_Bgfield.exe test_Helper.exe

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

check : all
	@passed=0; \
	total=0; \
	list=' $(TESTS) '; \
	for test in $$list; do \
	  total=$$((total + 1)); \
	  ./$$test;\
	  if [ "$$?" -eq "0" ]; then \
            passed=$$((passed + 1)); \
          fi; \
	done; \
	echo "[ DONE ]"; \
	echo "[ $$passed of $$total tests passed ]" 

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.


test_Bgfield.o : $(USER_DIR)/test_Bgfield.cc $(GTEST_HEADERS) \
	$(USER_DIR)/Helper.h $(USER_DIR)/../Background.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_Bgfield.cc

test_Helper.o : $(USER_DIR)/test_Helper.cc $(GTEST_HEADERS) \
	$(USER_DIR)/Helper.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_Helper.cc

MyMath.o : $(USER_DIR)/../MyMath.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/../MyMath.cc

MyRand.o : $(USER_DIR)/../MyRand.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/../MyRand.cc

Background.o : $(USER_DIR)/../Background.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/../Background.cc

test_Bgfield.exe: test_Bgfield.o gtest-all.o gtest_main.o MyMath.o MyRand.o \
	Background.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

test_Helper.exe: test_Helper.o gtest-all.o gtest_main.o MyMath.o MyRand.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
